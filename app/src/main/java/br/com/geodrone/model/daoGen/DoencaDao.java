package br.com.geodrone.model.daoGen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import br.com.geodrone.model.Doenca;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TB_DOENCA".
*/
public class DoencaDao extends AbstractDao<Doenca, Long> {

    public static final String TABLENAME = "TB_DOENCA";

    /**
     * Properties of entity Doenca.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IdDoencaRef = new Property(0, Long.class, "idDoencaRef", true, "ID_DOENCA_REF");
        public final static Property Descricao = new Property(1, String.class, "descricao", false, "DESCRICAO");
        public final static Property DescricaoCientifica = new Property(2, String.class, "descricaoCientifica", false, "DESCRICAO_CIENTIFICA");
        public final static Property IndAtivo = new Property(3, Integer.class, "indAtivo", false, "IND_ATIVO");
    }


    public DoencaDao(DaoConfig config) {
        super(config);
    }
    
    public DoencaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TB_DOENCA\" (" + //
                "\"ID_DOENCA_REF\" INTEGER PRIMARY KEY ," + // 0: idDoencaRef
                "\"DESCRICAO\" TEXT NOT NULL ," + // 1: descricao
                "\"DESCRICAO_CIENTIFICA\" TEXT NOT NULL ," + // 2: descricaoCientifica
                "\"IND_ATIVO\" INTEGER NOT NULL );"); // 3: indAtivo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TB_DOENCA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Doenca entity) {
        stmt.clearBindings();
 
        Long idDoencaRef = entity.getIdDoencaRef();
        if (idDoencaRef != null) {
            stmt.bindLong(1, idDoencaRef);
        }
        stmt.bindString(2, entity.getDescricao());
        stmt.bindString(3, entity.getDescricaoCientifica());
        stmt.bindLong(4, entity.getIndAtivo());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Doenca entity) {
        stmt.clearBindings();
 
        Long idDoencaRef = entity.getIdDoencaRef();
        if (idDoencaRef != null) {
            stmt.bindLong(1, idDoencaRef);
        }
        stmt.bindString(2, entity.getDescricao());
        stmt.bindString(3, entity.getDescricaoCientifica());
        stmt.bindLong(4, entity.getIndAtivo());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Doenca readEntity(Cursor cursor, int offset) {
        Doenca entity = new Doenca();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Doenca entity, int offset) {
        entity.setIdDoencaRef(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescricao(cursor.getString(offset + 1));
        entity.setDescricaoCientifica(cursor.getString(offset + 2));
        entity.setIndAtivo(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Doenca entity, long rowId) {
        entity.setIdDoencaRef(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Doenca entity) {
        if(entity != null) {
            return entity.getIdDoencaRef();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Doenca entity) {
        return entity.getIdDoencaRef() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
