package br.com.geodrone.model.daoGen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import br.com.geodrone.model.Cliente;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GEO_CLIENTE".
*/
public class ClienteDao extends AbstractDao<Cliente, Long> {

    public static final String TABLENAME = "GEO_CLIENTE";

    /**
     * Properties of entity Cliente.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID_CLIENTE");
        public final static Property NomeRazaoSocial = new Property(1, String.class, "nomeRazaoSocial", false, "NOME_RAZAO_SOCIAL");
        public final static Property Sobrenome = new Property(2, String.class, "sobrenome", false, "SOBRENOME");
        public final static Property IndPessoaFisica = new Property(3, Integer.class, "indPessoaFisica", false, "IND_PESSOA_FISICA");
        public final static Property Cpf = new Property(4, Long.class, "cpf", false, "CPF");
        public final static Property Cnpj = new Property(5, Long.class, "cnpj", false, "CNPJ");
        public final static Property Email = new Property(6, String.class, "email", false, "EMAIL");
        public final static Property Telefone = new Property(7, String.class, "telefone", false, "TELEFONE");
        public final static Property Celular = new Property(8, String.class, "celular", false, "CELULAR");
        public final static Property Segmento = new Property(9, String.class, "segmento", false, "SEGMENTO");
        public final static Property Logradouro = new Property(10, String.class, "logradouro", false, "LOGRADOURO");
        public final static Property Bairro = new Property(11, String.class, "bairro", false, "BAIRRO");
        public final static Property Cidade = new Property(12, String.class, "cidade", false, "CIDADE");
        public final static Property Numero = new Property(13, String.class, "numero", false, "NUMERO");
        public final static Property Complemento = new Property(14, String.class, "complemento", false, "COMPLEMENTO");
        public final static Property Uf = new Property(15, String.class, "uf", false, "UF");
        public final static Property Cep = new Property(16, Long.class, "cep", false, "CEP");
        public final static Property QtdeEstacoes = new Property(17, Long.class, "qtdeEstacoes", false, "QTDE_ESTACOES");
        public final static Property FlagStatus = new Property(18, String.class, "flagStatus", false, "FLAG_STATUS");
        public final static Property IdMicroRegiao = new Property(19, Long.class, "idMicroRegiao", false, "ID_MICRO_REGIAO");
        public final static Property DtInclusao = new Property(20, java.util.Date.class, "dtInclusao", false, "DT_INCLUSAO");
        public final static Property DtAlteracao = new Property(21, java.util.Date.class, "dtAlteracao", false, "DT_ALTERACAO");
        public final static Property VersaoSistema = new Property(22, Long.class, "versaoSistema", false, "VERSAO_SISTEMA");
    }


    public ClienteDao(DaoConfig config) {
        super(config);
    }
    
    public ClienteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GEO_CLIENTE\" (" + //
                "\"ID_CLIENTE\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NOME_RAZAO_SOCIAL\" TEXT," + // 1: nomeRazaoSocial
                "\"SOBRENOME\" TEXT," + // 2: sobrenome
                "\"IND_PESSOA_FISICA\" INTEGER," + // 3: indPessoaFisica
                "\"CPF\" INTEGER," + // 4: cpf
                "\"CNPJ\" INTEGER," + // 5: cnpj
                "\"EMAIL\" TEXT," + // 6: email
                "\"TELEFONE\" TEXT," + // 7: telefone
                "\"CELULAR\" TEXT," + // 8: celular
                "\"SEGMENTO\" TEXT," + // 9: segmento
                "\"LOGRADOURO\" TEXT," + // 10: logradouro
                "\"BAIRRO\" TEXT," + // 11: bairro
                "\"CIDADE\" TEXT," + // 12: cidade
                "\"NUMERO\" TEXT," + // 13: numero
                "\"COMPLEMENTO\" TEXT," + // 14: complemento
                "\"UF\" TEXT," + // 15: uf
                "\"CEP\" INTEGER," + // 16: cep
                "\"QTDE_ESTACOES\" INTEGER," + // 17: qtdeEstacoes
                "\"FLAG_STATUS\" TEXT," + // 18: flagStatus
                "\"ID_MICRO_REGIAO\" INTEGER," + // 19: idMicroRegiao
                "\"DT_INCLUSAO\" INTEGER NOT NULL ," + // 20: dtInclusao
                "\"DT_ALTERACAO\" INTEGER NOT NULL ," + // 21: dtAlteracao
                "\"VERSAO_SISTEMA\" INTEGER NOT NULL );"); // 22: versaoSistema
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GEO_CLIENTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cliente entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nomeRazaoSocial = entity.getNomeRazaoSocial();
        if (nomeRazaoSocial != null) {
            stmt.bindString(2, nomeRazaoSocial);
        }
 
        String sobrenome = entity.getSobrenome();
        if (sobrenome != null) {
            stmt.bindString(3, sobrenome);
        }
 
        Integer indPessoaFisica = entity.getIndPessoaFisica();
        if (indPessoaFisica != null) {
            stmt.bindLong(4, indPessoaFisica);
        }
 
        Long cpf = entity.getCpf();
        if (cpf != null) {
            stmt.bindLong(5, cpf);
        }
 
        Long cnpj = entity.getCnpj();
        if (cnpj != null) {
            stmt.bindLong(6, cnpj);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String telefone = entity.getTelefone();
        if (telefone != null) {
            stmt.bindString(8, telefone);
        }
 
        String celular = entity.getCelular();
        if (celular != null) {
            stmt.bindString(9, celular);
        }
 
        String segmento = entity.getSegmento();
        if (segmento != null) {
            stmt.bindString(10, segmento);
        }
 
        String logradouro = entity.getLogradouro();
        if (logradouro != null) {
            stmt.bindString(11, logradouro);
        }
 
        String bairro = entity.getBairro();
        if (bairro != null) {
            stmt.bindString(12, bairro);
        }
 
        String cidade = entity.getCidade();
        if (cidade != null) {
            stmt.bindString(13, cidade);
        }
 
        String numero = entity.getNumero();
        if (numero != null) {
            stmt.bindString(14, numero);
        }
 
        String complemento = entity.getComplemento();
        if (complemento != null) {
            stmt.bindString(15, complemento);
        }
 
        String uf = entity.getUf();
        if (uf != null) {
            stmt.bindString(16, uf);
        }
 
        Long cep = entity.getCep();
        if (cep != null) {
            stmt.bindLong(17, cep);
        }
 
        Long qtdeEstacoes = entity.getQtdeEstacoes();
        if (qtdeEstacoes != null) {
            stmt.bindLong(18, qtdeEstacoes);
        }
 
        String flagStatus = entity.getFlagStatus();
        if (flagStatus != null) {
            stmt.bindString(19, flagStatus);
        }
 
        Long idMicroRegiao = entity.getIdMicroRegiao();
        if (idMicroRegiao != null) {
            stmt.bindLong(20, idMicroRegiao);
        }
        stmt.bindLong(21, entity.getDtInclusao().getTime());
        stmt.bindLong(22, entity.getDtAlteracao().getTime());
        stmt.bindLong(23, entity.getVersaoSistema());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cliente entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nomeRazaoSocial = entity.getNomeRazaoSocial();
        if (nomeRazaoSocial != null) {
            stmt.bindString(2, nomeRazaoSocial);
        }
 
        String sobrenome = entity.getSobrenome();
        if (sobrenome != null) {
            stmt.bindString(3, sobrenome);
        }
 
        Integer indPessoaFisica = entity.getIndPessoaFisica();
        if (indPessoaFisica != null) {
            stmt.bindLong(4, indPessoaFisica);
        }
 
        Long cpf = entity.getCpf();
        if (cpf != null) {
            stmt.bindLong(5, cpf);
        }
 
        Long cnpj = entity.getCnpj();
        if (cnpj != null) {
            stmt.bindLong(6, cnpj);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String telefone = entity.getTelefone();
        if (telefone != null) {
            stmt.bindString(8, telefone);
        }
 
        String celular = entity.getCelular();
        if (celular != null) {
            stmt.bindString(9, celular);
        }
 
        String segmento = entity.getSegmento();
        if (segmento != null) {
            stmt.bindString(10, segmento);
        }
 
        String logradouro = entity.getLogradouro();
        if (logradouro != null) {
            stmt.bindString(11, logradouro);
        }
 
        String bairro = entity.getBairro();
        if (bairro != null) {
            stmt.bindString(12, bairro);
        }
 
        String cidade = entity.getCidade();
        if (cidade != null) {
            stmt.bindString(13, cidade);
        }
 
        String numero = entity.getNumero();
        if (numero != null) {
            stmt.bindString(14, numero);
        }
 
        String complemento = entity.getComplemento();
        if (complemento != null) {
            stmt.bindString(15, complemento);
        }
 
        String uf = entity.getUf();
        if (uf != null) {
            stmt.bindString(16, uf);
        }
 
        Long cep = entity.getCep();
        if (cep != null) {
            stmt.bindLong(17, cep);
        }
 
        Long qtdeEstacoes = entity.getQtdeEstacoes();
        if (qtdeEstacoes != null) {
            stmt.bindLong(18, qtdeEstacoes);
        }
 
        String flagStatus = entity.getFlagStatus();
        if (flagStatus != null) {
            stmt.bindString(19, flagStatus);
        }
 
        Long idMicroRegiao = entity.getIdMicroRegiao();
        if (idMicroRegiao != null) {
            stmt.bindLong(20, idMicroRegiao);
        }
        stmt.bindLong(21, entity.getDtInclusao().getTime());
        stmt.bindLong(22, entity.getDtAlteracao().getTime());
        stmt.bindLong(23, entity.getVersaoSistema());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Cliente readEntity(Cursor cursor, int offset) {
        Cliente entity = new Cliente();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cliente entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNomeRazaoSocial(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSobrenome(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIndPessoaFisica(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCpf(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setCnpj(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTelefone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCelular(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSegmento(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLogradouro(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBairro(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCidade(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setNumero(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setComplemento(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUf(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCep(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setQtdeEstacoes(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setFlagStatus(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIdMicroRegiao(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
        entity.setDtInclusao(new java.util.Date(cursor.getLong(offset + 20)));
        entity.setDtAlteracao(new java.util.Date(cursor.getLong(offset + 21)));
        entity.setVersaoSistema(cursor.getLong(offset + 22));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Cliente entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Cliente entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Cliente entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
