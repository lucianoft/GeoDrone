package br.com.geodrone.model.daoGen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import br.com.geodrone.model.RegistroCondicaoTempo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GEO_REGISTRO_COND_TEMPO".
*/
public class RegistroCondicoesTempoDao extends AbstractDao<RegistroCondicaoTempo, Long> {

    public static final String TABLENAME = "GEO_REGISTRO_COND_TEMPO";

    /**
     * Properties of entity RegistroCondicaoTempo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID_REGISTRO_COND_TEMPO_DISP");
        public final static Property FlagDirecao = new Property(1, String.class, "flagDirecao", false, "FLAG_DIRECAO");
        public final static Property FlagCondicaoTempo = new Property(2, String.class, "flagCondicaoTempo", false, "FLAG_CONDICAO_TEMPO");
        public final static Property Observacao = new Property(3, String.class, "observacao", false, "OBSERVACAO");
        public final static Property IdRegistroCondTempoDisp = new Property(4, Long.class, "idRegistroCondTempoDisp", false, "ID_REGISTRO_COND_TEMPO");
        public final static Property IdCliente = new Property(5, Long.class, "idCliente", false, "ID_CLIENTE");
        public final static Property Latitude = new Property(6, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(7, Double.class, "longitude", false, "LONGITUDE");
        public final static Property DtRegistro = new Property(8, java.util.Date.class, "dtRegistro", false, "DT_REGISTRO");
        public final static Property IdDispositivo = new Property(9, Long.class, "idDispositivo", false, "ID_DISPOSITIVO");
        public final static Property VersaoSistema = new Property(10, Long.class, "versaoSistema", false, "VERSAO_SISTEMA");
        public final static Property DtInclusao = new Property(11, java.util.Date.class, "dtInclusao", false, "DT_INCLUSAO");
        public final static Property DtAlteracao = new Property(12, java.util.Date.class, "dtAlteracao", false, "DT_ALTERACAO");
        public final static Property IdUsuarioReg = new Property(13, Long.class, "idUsuarioReg", false, "ID_USUARIO_REG");
    }


    public RegistroCondicoesTempoDao(DaoConfig config) {
        super(config);
    }
    
    public RegistroCondicoesTempoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GEO_REGISTRO_COND_TEMPO\" (" + //
                "\"ID_REGISTRO_COND_TEMPO_DISP\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FLAG_DIRECAO\" TEXT," + // 1: flagDirecao
                "\"FLAG_CONDICAO_TEMPO\" TEXT," + // 2: flagCondicaoTempo
                "\"OBSERVACAO\" TEXT," + // 3: observacao
                "\"ID_REGISTRO_COND_TEMPO\" INTEGER," + // 4: idRegistroCondTempoDisp
                "\"ID_CLIENTE\" INTEGER," + // 5: idCliente
                "\"LATITUDE\" REAL," + // 6: latitude
                "\"LONGITUDE\" REAL," + // 7: longitude
                "\"DT_REGISTRO\" INTEGER," + // 8: dtRegistro
                "\"ID_DISPOSITIVO\" INTEGER," + // 9: idDispositivo
                "\"VERSAO_SISTEMA\" INTEGER NOT NULL ," + // 10: versaoSistema
                "\"DT_INCLUSAO\" INTEGER," + // 11: dtInclusao
                "\"DT_ALTERACAO\" INTEGER," + // 12: dtAlteracao
                "\"ID_USUARIO_REG\" INTEGER);"); // 13: idUsuarioReg
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GEO_REGISTRO_COND_TEMPO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RegistroCondicaoTempo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String flagDirecao = entity.getFlagDirecao();
        if (flagDirecao != null) {
            stmt.bindString(2, flagDirecao);
        }
 
        String flagCondicaoTempo = entity.getFlagCondicaoTempo();
        if (flagCondicaoTempo != null) {
            stmt.bindString(3, flagCondicaoTempo);
        }
 
        String observacao = entity.getObservacao();
        if (observacao != null) {
            stmt.bindString(4, observacao);
        }
 
        Long idRegistroCondTempoDisp = entity.getIdRegistroCondTempo();
        if (idRegistroCondTempoDisp != null) {
            stmt.bindLong(5, idRegistroCondTempoDisp);
        }
 
        Long idCliente = entity.getIdCliente();
        if (idCliente != null) {
            stmt.bindLong(6, idCliente);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(7, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(8, longitude);
        }
 
        java.util.Date dtRegistro = entity.getDtRegistro();
        if (dtRegistro != null) {
            stmt.bindLong(9, dtRegistro.getTime());
        }
 
        Long idDispositivo = entity.getIdDispositivo();
        if (idDispositivo != null) {
            stmt.bindLong(10, idDispositivo);
        }
        stmt.bindLong(11, entity.getVersaoSistema());
 
        java.util.Date dtInclusao = entity.getDtInclusao();
        if (dtInclusao != null) {
            stmt.bindLong(12, dtInclusao.getTime());
        }
 
        java.util.Date dtAlteracao = entity.getDtAlteracao();
        if (dtAlteracao != null) {
            stmt.bindLong(13, dtAlteracao.getTime());
        }
 
        Long idUsuarioReg = entity.getIdUsuarioReg();
        if (idUsuarioReg != null) {
            stmt.bindLong(14, idUsuarioReg);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RegistroCondicaoTempo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String flagDirecao = entity.getFlagDirecao();
        if (flagDirecao != null) {
            stmt.bindString(2, flagDirecao);
        }
 
        String flagCondicaoTempo = entity.getFlagCondicaoTempo();
        if (flagCondicaoTempo != null) {
            stmt.bindString(3, flagCondicaoTempo);
        }
 
        String observacao = entity.getObservacao();
        if (observacao != null) {
            stmt.bindString(4, observacao);
        }
 
        Long idRegistroCondTempoDisp = entity.getIdRegistroCondTempo();
        if (idRegistroCondTempoDisp != null) {
            stmt.bindLong(5, idRegistroCondTempoDisp);
        }
 
        Long idCliente = entity.getIdCliente();
        if (idCliente != null) {
            stmt.bindLong(6, idCliente);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(7, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(8, longitude);
        }
 
        java.util.Date dtRegistro = entity.getDtRegistro();
        if (dtRegistro != null) {
            stmt.bindLong(9, dtRegistro.getTime());
        }
 
        Long idDispositivo = entity.getIdDispositivo();
        if (idDispositivo != null) {
            stmt.bindLong(10, idDispositivo);
        }
        stmt.bindLong(11, entity.getVersaoSistema());
 
        java.util.Date dtInclusao = entity.getDtInclusao();
        if (dtInclusao != null) {
            stmt.bindLong(12, dtInclusao.getTime());
        }
 
        java.util.Date dtAlteracao = entity.getDtAlteracao();
        if (dtAlteracao != null) {
            stmt.bindLong(13, dtAlteracao.getTime());
        }
 
        Long idUsuarioReg = entity.getIdUsuarioReg();
        if (idUsuarioReg != null) {
            stmt.bindLong(14, idUsuarioReg);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RegistroCondicaoTempo readEntity(Cursor cursor, int offset) {
        RegistroCondicaoTempo entity = new RegistroCondicaoTempo();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RegistroCondicaoTempo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFlagDirecao(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFlagCondicaoTempo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setObservacao(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdRegistroCondTempo(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setIdCliente(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setLatitude(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setLongitude(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setDtRegistro(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setIdDispositivo(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setVersaoSistema(cursor.getLong(offset + 10));
        entity.setDtInclusao(cursor.isNull(offset + 11) ? null : new java.util.Date(cursor.getLong(offset + 11)));
        entity.setDtAlteracao(cursor.isNull(offset + 12) ? null : new java.util.Date(cursor.getLong(offset + 12)));
        entity.setIdUsuarioReg(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RegistroCondicaoTempo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RegistroCondicaoTempo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RegistroCondicaoTempo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
