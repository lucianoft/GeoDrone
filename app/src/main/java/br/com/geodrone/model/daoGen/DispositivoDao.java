package br.com.geodrone.model.daoGen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import br.com.geodrone.model.Dispositivo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TB_DISPOSITIVO".
*/
public class DispositivoDao extends AbstractDao<Dispositivo, Long> {

    public static final String TABLENAME = "TB_DISPOSITIVO";

    /**
     * Properties of entity Dispositivo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IdRef = new Property(0, Long.class, "idRef", true, "ID_DISPOSITIVO");
        public final static Property DtInclusao = new Property(1, java.util.Date.class, "dtInclusao", false, "DT_INCLUSAO");
        public final static Property DtAlteracao = new Property(2, java.util.Date.class, "dtAlteracao", false, "DT_ALTERACAO");
        public final static Property VersaoSistema = new Property(3, Long.class, "versaoSistema", false, "VERSAO_SISTEMA");
    }


    public DispositivoDao(DaoConfig config) {
        super(config);
    }
    
    public DispositivoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TB_DISPOSITIVO\" (" + //
                "\"ID_DISPOSITIVO\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idRef
                "\"DT_INCLUSAO\" INTEGER NOT NULL ," + // 1: dtInclusao
                "\"DT_ALTERACAO\" INTEGER NOT NULL ," + // 2: dtAlteracao
                "\"VERSAO_SISTEMA\" INTEGER NOT NULL );"); // 3: versaoSistema
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TB_DISPOSITIVO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Dispositivo entity) {
        stmt.clearBindings();
 
        Long idRef = entity.getIdRef();
        if (idRef != null) {
            stmt.bindLong(1, idRef);
        }
        stmt.bindLong(2, entity.getDtInclusao().getTime());
        stmt.bindLong(3, entity.getDtAlteracao().getTime());
        stmt.bindLong(4, entity.getVersaoSistema());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Dispositivo entity) {
        stmt.clearBindings();
 
        Long idRef = entity.getIdRef();
        if (idRef != null) {
            stmt.bindLong(1, idRef);
        }
        stmt.bindLong(2, entity.getDtInclusao().getTime());
        stmt.bindLong(3, entity.getDtAlteracao().getTime());
        stmt.bindLong(4, entity.getVersaoSistema());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Dispositivo readEntity(Cursor cursor, int offset) {
        Dispositivo entity = new Dispositivo();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Dispositivo entity, int offset) {
        entity.setIdRef(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDtInclusao(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setDtAlteracao(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setVersaoSistema(cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Dispositivo entity, long rowId) {
        entity.setIdRef(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Dispositivo entity) {
        if(entity != null) {
            return entity.getIdRef();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Dispositivo entity) {
        return entity.getIdRef() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
