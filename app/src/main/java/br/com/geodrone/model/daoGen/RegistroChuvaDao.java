package br.com.geodrone.model.daoGen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import br.com.geodrone.model.RegistroChuva;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TB_REGISTRO_CHUVA".
*/
public class RegistroChuvaDao extends AbstractDao<RegistroChuva, Long> {

    public static final String TABLENAME = "TB_REGISTRO_CHUVA";

    /**
     * Properties of entity RegistroChuva.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID_REGISTRO_CHUVA_DISP");
        public final static Property IdPontoColetaChuva = new Property(1, Long.class, "idPontoColetaChuva", false, "ID_PONTO_COLETA_CHUVA");
        public final static Property IdCliente = new Property(2, Long.class, "idCliente", false, "ID_CLIENTE");
        public final static Property Observacao = new Property(3, String.class, "observacao", false, "OBSERVACAO");
        public final static Property Volume = new Property(4, Long.class, "volume", false, "VOLUME");
        public final static Property IdRegistroChuva = new Property(5, Long.class, "idRegistroChuva", false, "ID_REGISTRO_CHUVA");
        public final static Property DtInclusao = new Property(6, java.util.Date.class, "dtInclusao", false, "DT_INCLUSAO");
        public final static Property DtAlteracao = new Property(7, java.util.Date.class, "dtAlteracao", false, "DT_ALTERACAO");
        public final static Property IdUsuario = new Property(8, Long.class, "idUsuario", false, "ID_USUARIO");
        public final static Property IdDispositivo = new Property(9, Long.class, "idDispositivo", false, "ID_DISPOSITIVO");
        public final static Property VersaoSistema = new Property(10, Long.class, "versaoSistema", false, "VERSAO_SISTEMA");
    }


    public RegistroChuvaDao(DaoConfig config) {
        super(config);
    }
    
    public RegistroChuvaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TB_REGISTRO_CHUVA\" (" + //
                "\"ID_REGISTRO_CHUVA_DISP\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ID_PONTO_COLETA_CHUVA\" INTEGER NOT NULL ," + // 1: idPontoColetaChuva
                "\"ID_CLIENTE\" INTEGER NOT NULL ," + // 2: idCliente
                "\"OBSERVACAO\" TEXT," + // 3: observacao
                "\"VOLUME\" INTEGER NOT NULL ," + // 4: volume
                "\"ID_REGISTRO_CHUVA\" INTEGER," + // 5: idRegistroChuva
                "\"DT_INCLUSAO\" INTEGER NOT NULL ," + // 6: dtInclusao
                "\"DT_ALTERACAO\" INTEGER NOT NULL ," + // 7: dtAlteracao
                "\"ID_USUARIO\" INTEGER," + // 8: idUsuario
                "\"ID_DISPOSITIVO\" INTEGER," + // 9: idDispositivo
                "\"VERSAO_SISTEMA\" INTEGER NOT NULL );"); // 10: versaoSistema
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TB_REGISTRO_CHUVA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RegistroChuva entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIdPontoColetaChuva());
        stmt.bindLong(3, entity.getIdCliente());
 
        String observacao = entity.getObservacao();
        if (observacao != null) {
            stmt.bindString(4, observacao);
        }
        stmt.bindLong(5, entity.getVolume());
 
        Long idRegistroChuva = entity.getIdRegistroChuva();
        if (idRegistroChuva != null) {
            stmt.bindLong(6, idRegistroChuva);
        }
        stmt.bindLong(7, entity.getDtInclusao().getTime());
        stmt.bindLong(8, entity.getDtAlteracao().getTime());
 
        Long idUsuario = entity.getIdUsuario();
        if (idUsuario != null) {
            stmt.bindLong(9, idUsuario);
        }
 
        Long idDispositivo = entity.getIdDispositivo();
        if (idDispositivo != null) {
            stmt.bindLong(10, idDispositivo);
        }
        stmt.bindLong(11, entity.getVersaoSistema());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RegistroChuva entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIdPontoColetaChuva());
        stmt.bindLong(3, entity.getIdCliente());
 
        String observacao = entity.getObservacao();
        if (observacao != null) {
            stmt.bindString(4, observacao);
        }
        stmt.bindLong(5, entity.getVolume());
 
        Long idRegistroChuva = entity.getIdRegistroChuva();
        if (idRegistroChuva != null) {
            stmt.bindLong(6, idRegistroChuva);
        }
        stmt.bindLong(7, entity.getDtInclusao().getTime());
        stmt.bindLong(8, entity.getDtAlteracao().getTime());
 
        Long idUsuario = entity.getIdUsuario();
        if (idUsuario != null) {
            stmt.bindLong(9, idUsuario);
        }
 
        Long idDispositivo = entity.getIdDispositivo();
        if (idDispositivo != null) {
            stmt.bindLong(10, idDispositivo);
        }
        stmt.bindLong(11, entity.getVersaoSistema());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RegistroChuva readEntity(Cursor cursor, int offset) {
        RegistroChuva entity = new RegistroChuva();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RegistroChuva entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdPontoColetaChuva(cursor.getLong(offset + 1));
        entity.setIdCliente(cursor.getLong(offset + 2));
        entity.setObservacao(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVolume(cursor.getLong(offset + 4));
        entity.setIdRegistroChuva(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setDtInclusao(new java.util.Date(cursor.getLong(offset + 6)));
        entity.setDtAlteracao(new java.util.Date(cursor.getLong(offset + 7)));
        entity.setIdUsuario(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setIdDispositivo(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setVersaoSistema(cursor.getLong(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RegistroChuva entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RegistroChuva entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RegistroChuva entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
