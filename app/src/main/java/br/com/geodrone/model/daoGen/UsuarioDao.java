package br.com.geodrone.model.daoGen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import br.com.geodrone.model.Usuario;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GEO_USUARIO".
*/
public class UsuarioDao extends AbstractDao<Usuario, Long> {

    public static final String TABLENAME = "GEO_USUARIO";

    /**
     * Properties of entity Usuario.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID_USUARIO");
        public final static Property Nome = new Property(1, String.class, "nome", false, "NOME");
        public final static Property Sobrenome = new Property(2, String.class, "sobrenome", false, "SOBRENOME");
        public final static Property Email = new Property(3, String.class, "email", false, "EMAIL");
        public final static Property Telefone = new Property(4, String.class, "telefone", false, "TELEFONE");
        public final static Property Senha = new Property(5, String.class, "senha", false, "SENHA");
        public final static Property FlagPerfil = new Property(6, String.class, "flagPerfil", false, "FLAG_PERFIL");
        public final static Property IdCliente = new Property(7, Long.class, "idCliente", false, "ID_CLIENTE");
        public final static Property IndAceiteGeomonitora = new Property(8, Integer.class, "indAceiteGeomonitora", false, "IND_ACEITE_GEOMONITORA");
        public final static Property IndAceiteGeoClima = new Property(9, Integer.class, "indAceiteGeoClima", false, "IND_ACEITE_GEOCLIMA");
        public final static Property IndAtivo = new Property(10, Integer.class, "indAtivo", false, "IND_ATIVO");
        public final static Property DtInclusao = new Property(11, java.util.Date.class, "dtInclusao", false, "DT_INCLUSAO");
        public final static Property DtAlteracao = new Property(12, java.util.Date.class, "dtAlteracao", false, "DT_ALTERACAO");
        public final static Property VersaoSistema = new Property(13, Long.class, "versaoSistema", false, "VERSAO_SISTEMA");
    }


    public UsuarioDao(DaoConfig config) {
        super(config);
    }
    
    public UsuarioDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GEO_USUARIO\" (" + //
                "\"ID_USUARIO\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NOME\" TEXT," + // 1: nome
                "\"SOBRENOME\" TEXT," + // 2: sobrenome
                "\"EMAIL\" TEXT," + // 3: email
                "\"TELEFONE\" TEXT," + // 4: telefone
                "\"SENHA\" TEXT," + // 5: senha
                "\"FLAG_PERFIL\" TEXT," + // 6: flagPerfil
                "\"ID_CLIENTE\" INTEGER NOT NULL ," + // 7: idCliente
                "\"IND_ACEITE_GEOMONITORA\" INTEGER," + // 8: indAceiteGeomonitora
                "\"IND_ACEITE_GEOCLIMA\" INTEGER," + // 9: indAceiteGeoClima
                "\"IND_ATIVO\" INTEGER NOT NULL ," + // 10: indAtivo
                "\"DT_INCLUSAO\" INTEGER NOT NULL ," + // 11: dtInclusao
                "\"DT_ALTERACAO\" INTEGER NOT NULL ," + // 12: dtAlteracao
                "\"VERSAO_SISTEMA\" INTEGER NOT NULL );"); // 13: versaoSistema
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GEO_USUARIO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Usuario entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nome = entity.getNome();
        if (nome != null) {
            stmt.bindString(2, nome);
        }
 
        String sobrenome = entity.getSobrenome();
        if (sobrenome != null) {
            stmt.bindString(3, sobrenome);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String telefone = entity.getTelefone();
        if (telefone != null) {
            stmt.bindString(5, telefone);
        }
 
        String senha = entity.getSenha();
        if (senha != null) {
            stmt.bindString(6, senha);
        }
 
        String flagPerfil = entity.getFlagPerfil();
        if (flagPerfil != null) {
            stmt.bindString(7, flagPerfil);
        }
        stmt.bindLong(8, entity.getIdCliente());
 
        Integer indAceiteGeomonitora = entity.getIndAceiteGeomonitora();
        if (indAceiteGeomonitora != null) {
            stmt.bindLong(9, indAceiteGeomonitora);
        }
 
        Integer indAceiteGeoClima = entity.getIndAceiteGeoClima();
        if (indAceiteGeoClima != null) {
            stmt.bindLong(10, indAceiteGeoClima);
        }
        stmt.bindLong(11, entity.getIndAtivo());
        stmt.bindLong(12, entity.getDtInclusao().getTime());
        stmt.bindLong(13, entity.getDtAlteracao().getTime());
        stmt.bindLong(14, entity.getVersaoSistema());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Usuario entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nome = entity.getNome();
        if (nome != null) {
            stmt.bindString(2, nome);
        }
 
        String sobrenome = entity.getSobrenome();
        if (sobrenome != null) {
            stmt.bindString(3, sobrenome);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(4, email);
        }
 
        String telefone = entity.getTelefone();
        if (telefone != null) {
            stmt.bindString(5, telefone);
        }
 
        String senha = entity.getSenha();
        if (senha != null) {
            stmt.bindString(6, senha);
        }
 
        String flagPerfil = entity.getFlagPerfil();
        if (flagPerfil != null) {
            stmt.bindString(7, flagPerfil);
        }
        stmt.bindLong(8, entity.getIdCliente());
 
        Integer indAceiteGeomonitora = entity.getIndAceiteGeomonitora();
        if (indAceiteGeomonitora != null) {
            stmt.bindLong(9, indAceiteGeomonitora);
        }
 
        Integer indAceiteGeoClima = entity.getIndAceiteGeoClima();
        if (indAceiteGeoClima != null) {
            stmt.bindLong(10, indAceiteGeoClima);
        }
        stmt.bindLong(11, entity.getIndAtivo());
        stmt.bindLong(12, entity.getDtInclusao().getTime());
        stmt.bindLong(13, entity.getDtAlteracao().getTime());
        stmt.bindLong(14, entity.getVersaoSistema());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Usuario readEntity(Cursor cursor, int offset) {
        Usuario entity = new Usuario();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Usuario entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNome(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSobrenome(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTelefone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSenha(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFlagPerfil(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIdCliente(cursor.getLong(offset + 7));
        entity.setIndAceiteGeomonitora(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIndAceiteGeoClima(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setIndAtivo(cursor.getInt(offset + 10));
        entity.setDtInclusao(new java.util.Date(cursor.getLong(offset + 11)));
        entity.setDtAlteracao(new java.util.Date(cursor.getLong(offset + 12)));
        entity.setVersaoSistema(cursor.getLong(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Usuario entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Usuario entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Usuario entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
