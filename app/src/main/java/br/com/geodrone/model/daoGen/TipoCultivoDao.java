package br.com.geodrone.model.daoGen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import br.com.geodrone.model.TipoCultivo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GEO_TIPO_CULTIVO".
*/
public class TipoCultivoDao extends AbstractDao<TipoCultivo, Long> {

    public static final String TABLENAME = "GEO_TIPO_CULTIVO";

    /**
     * Properties of entity TipoCultivo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID_TIPO_CULTIVO");
        public final static Property Descricao = new Property(1, String.class, "descricao", false, "DESCRICAO");
        public final static Property IndAtivo = new Property(2, Integer.class, "indAtivo", false, "IND_ATIVO");
        public final static Property DtInclusao = new Property(3, java.util.Date.class, "dtInclusao", false, "DT_INCLUSAO");
        public final static Property DtAlteracao = new Property(4, java.util.Date.class, "dtAlteracao", false, "DT_ALTERACAO");
        public final static Property VersaoSistema = new Property(5, Long.class, "versaoSistema", false, "VERSAO_SISTEMA");
    }


    public TipoCultivoDao(DaoConfig config) {
        super(config);
    }
    
    public TipoCultivoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GEO_TIPO_CULTIVO\" (" + //
                "\"ID_TIPO_CULTIVO\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DESCRICAO\" TEXT," + // 1: descricao
                "\"IND_ATIVO\" INTEGER NOT NULL ," + // 2: indAtivo
                "\"DT_INCLUSAO\" INTEGER NOT NULL ," + // 3: dtInclusao
                "\"DT_ALTERACAO\" INTEGER NOT NULL ," + // 4: dtAlteracao
                "\"VERSAO_SISTEMA\" INTEGER NOT NULL );"); // 5: versaoSistema
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GEO_TIPO_CULTIVO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TipoCultivo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String descricao = entity.getDescricao();
        if (descricao != null) {
            stmt.bindString(2, descricao);
        }
        stmt.bindLong(3, entity.getIndAtivo());
        stmt.bindLong(4, entity.getDtInclusao().getTime());
        stmt.bindLong(5, entity.getDtAlteracao().getTime());
        stmt.bindLong(6, entity.getVersaoSistema());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TipoCultivo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String descricao = entity.getDescricao();
        if (descricao != null) {
            stmt.bindString(2, descricao);
        }
        stmt.bindLong(3, entity.getIndAtivo());
        stmt.bindLong(4, entity.getDtInclusao().getTime());
        stmt.bindLong(5, entity.getDtAlteracao().getTime());
        stmt.bindLong(6, entity.getVersaoSistema());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TipoCultivo readEntity(Cursor cursor, int offset) {
        TipoCultivo entity = new TipoCultivo();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TipoCultivo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescricao(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIndAtivo(cursor.getInt(offset + 2));
        entity.setDtInclusao(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setDtAlteracao(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setVersaoSistema(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TipoCultivo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TipoCultivo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TipoCultivo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
