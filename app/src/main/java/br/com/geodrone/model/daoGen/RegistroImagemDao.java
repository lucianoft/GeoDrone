package br.com.geodrone.model.daoGen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import br.com.geodrone.model.RegistroImagem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TB_PONTO_COLETA_IMAGEM".
*/
public class RegistroImagemDao extends AbstractDao<RegistroImagem, Long> {

    public static final String TABLENAME = "TB_PONTO_COLETA_IMAGEM";

    /**
     * Properties of entity RegistroImagem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IdRegistroImagem = new Property(0, Long.class, "idRegistroImagem", true, "ID_REGISTRO_IMAGEM");
        public final static Property IdClienteRef = new Property(1, Long.class, "idClienteRef", false, "ID_CLIENTE_REF");
        public final static Property Latitude = new Property(2, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(3, Double.class, "longitude", false, "LONGITUDE");
        public final static Property FlagDirecao = new Property(4, String.class, "flagDirecao", false, "FLAG_DIRECAO");
        public final static Property Observacao = new Property(5, String.class, "observacao", false, "OBSERVACAO");
        public final static Property Imagem = new Property(6, byte[].class, "imagem", false, "IMAGEM");
        public final static Property IdImagemRef = new Property(7, Long.class, "idImagemRef", false, "ID_IMAGEM_REF");
        public final static Property DtInclusao = new Property(8, java.util.Date.class, "dtInclusao", false, "DT_INCLUSAO");
        public final static Property DtAlteracao = new Property(9, java.util.Date.class, "dtAlteracao", false, "DT_ALTERACAO");
        public final static Property IdUsuario = new Property(10, Long.class, "idUsuario", false, "ID_USUARIO");
        public final static Property IdRegistroImagemRef = new Property(11, Long.class, "idRegistroImagemRef", false, "ID_REGISTRO_IMAGEM_REF");
        public final static Property IdDispositivo = new Property(12, Long.class, "idDispositivo", false, "ID_DISPOSITIVO");
    }


    public RegistroImagemDao(DaoConfig config) {
        super(config);
    }
    
    public RegistroImagemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TB_PONTO_COLETA_IMAGEM\" (" + //
                "\"ID_REGISTRO_IMAGEM\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idRegistroImagem
                "\"ID_CLIENTE_REF\" INTEGER NOT NULL ," + // 1: idClienteRef
                "\"LATITUDE\" REAL NOT NULL ," + // 2: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 3: longitude
                "\"FLAG_DIRECAO\" TEXT," + // 4: flagDirecao
                "\"OBSERVACAO\" TEXT," + // 5: observacao
                "\"IMAGEM\" BLOB NOT NULL ," + // 6: imagem
                "\"ID_IMAGEM_REF\" INTEGER," + // 7: idImagemRef
                "\"DT_INCLUSAO\" INTEGER NOT NULL ," + // 8: dtInclusao
                "\"DT_ALTERACAO\" INTEGER NOT NULL ," + // 9: dtAlteracao
                "\"ID_USUARIO\" INTEGER NOT NULL ," + // 10: idUsuario
                "\"ID_REGISTRO_IMAGEM_REF\" INTEGER," + // 11: idRegistroImagemRef
                "\"ID_DISPOSITIVO\" INTEGER);"); // 12: idDispositivo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TB_PONTO_COLETA_IMAGEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RegistroImagem entity) {
        stmt.clearBindings();
 
        Long idRegistroImagem = entity.getIdRegistroImagem();
        if (idRegistroImagem != null) {
            stmt.bindLong(1, idRegistroImagem);
        }
        stmt.bindLong(2, entity.getIdClienteRef());
        stmt.bindDouble(3, entity.getLatitude());
        stmt.bindDouble(4, entity.getLongitude());
 
        String flagDirecao = entity.getFlagDirecao();
        if (flagDirecao != null) {
            stmt.bindString(5, flagDirecao);
        }
 
        String observacao = entity.getObservacao();
        if (observacao != null) {
            stmt.bindString(6, observacao);
        }
        stmt.bindBlob(7, entity.getImagem());
 
        Long idImagemRef = entity.getIdImagemRef();
        if (idImagemRef != null) {
            stmt.bindLong(8, idImagemRef);
        }
        stmt.bindLong(9, entity.getDtInclusao().getTime());
        stmt.bindLong(10, entity.getDtAlteracao().getTime());
        stmt.bindLong(11, entity.getIdUsuario());
 
        Long idRegistroImagemRef = entity.getIdRegistroImagemRef();
        if (idRegistroImagemRef != null) {
            stmt.bindLong(12, idRegistroImagemRef);
        }
 
        Long idDispositivo = entity.getIdDispositivo();
        if (idDispositivo != null) {
            stmt.bindLong(13, idDispositivo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RegistroImagem entity) {
        stmt.clearBindings();
 
        Long idRegistroImagem = entity.getIdRegistroImagem();
        if (idRegistroImagem != null) {
            stmt.bindLong(1, idRegistroImagem);
        }
        stmt.bindLong(2, entity.getIdClienteRef());
        stmt.bindDouble(3, entity.getLatitude());
        stmt.bindDouble(4, entity.getLongitude());
 
        String flagDirecao = entity.getFlagDirecao();
        if (flagDirecao != null) {
            stmt.bindString(5, flagDirecao);
        }
 
        String observacao = entity.getObservacao();
        if (observacao != null) {
            stmt.bindString(6, observacao);
        }
        stmt.bindBlob(7, entity.getImagem());
 
        Long idImagemRef = entity.getIdImagemRef();
        if (idImagemRef != null) {
            stmt.bindLong(8, idImagemRef);
        }
        stmt.bindLong(9, entity.getDtInclusao().getTime());
        stmt.bindLong(10, entity.getDtAlteracao().getTime());
        stmt.bindLong(11, entity.getIdUsuario());
 
        Long idRegistroImagemRef = entity.getIdRegistroImagemRef();
        if (idRegistroImagemRef != null) {
            stmt.bindLong(12, idRegistroImagemRef);
        }
 
        Long idDispositivo = entity.getIdDispositivo();
        if (idDispositivo != null) {
            stmt.bindLong(13, idDispositivo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RegistroImagem readEntity(Cursor cursor, int offset) {
        RegistroImagem entity = new RegistroImagem();
        readEntity(cursor, entity, offset);
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RegistroImagem entity, int offset) {
        entity.setIdRegistroImagem(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdClienteRef(cursor.getLong(offset + 1));
        entity.setLatitude(cursor.getDouble(offset + 2));
        entity.setLongitude(cursor.getDouble(offset + 3));
        entity.setFlagDirecao(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setObservacao(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImagem(cursor.getBlob(offset + 6));
        entity.setIdImagemRef(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setDtInclusao(new java.util.Date(cursor.getLong(offset + 8)));
        entity.setDtAlteracao(new java.util.Date(cursor.getLong(offset + 9)));
        entity.setIdUsuario(cursor.getLong(offset + 10));
        entity.setIdRegistroImagemRef(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setIdDispositivo(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RegistroImagem entity, long rowId) {
        entity.setIdRegistroImagem(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RegistroImagem entity) {
        if(entity != null) {
            return entity.getIdRegistroImagem();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RegistroImagem entity) {
        return entity.getIdRegistroImagem() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
